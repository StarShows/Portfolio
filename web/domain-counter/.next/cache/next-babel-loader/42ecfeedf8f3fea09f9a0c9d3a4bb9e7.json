{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _assign = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/assign\"));\n\nvar _defineProperty = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/define-property\"));\n\nvar __importDefault = void 0 && (void 0).__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\n(0, _defineProperty.default)(exports, \"__esModule\", {\n  value: true\n});\n\nconst url_1 = require(\"url\");\n\nconst mitt_1 = __importDefault(require(\"../mitt\"));\n\nconst utils_1 = require(\"../utils\");\n\nconst rewrite_url_for_export_1 = require(\"./rewrite-url-for-export\");\n\nconst route_matcher_1 = require(\"./utils/route-matcher\");\n\nconst route_regex_1 = require(\"./utils/route-regex\");\n\nconst is_dynamic_1 = require(\"./utils/is-dynamic\");\n\nfunction toRoute(path) {\n  return path.replace(/\\/$/, '') || '/';\n}\n\nclass Router {\n  constructor(pathname, query, as, {\n    initialProps,\n    pageLoader,\n    App,\n    wrapApp,\n    Component,\n    err,\n    subscription\n  }) {\n    this.onPopState = e => {\n      if (!e.state) {\n        // We get state as undefined for two reasons.\n        //  1. With older safari (< 8) and older chrome (< 34)\n        //  2. When the URL changed with #\n        //\n        // In the both cases, we don't need to proceed and change the route.\n        // (as it's already changed)\n        // But we can simply replace the state with the new changes.\n        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n        // So, doing the following for (1) does no harm.\n        const {\n          pathname,\n          query\n        } = this;\n        this.changeState('replaceState', utils_1.formatWithValidation({\n          pathname,\n          query\n        }), utils_1.getURL());\n        return;\n      } // Make sure we don't re-render on initial load,\n      // can be caused by navigating back from an external site\n\n\n      if (e.state.options && e.state.options.fromExternal) {\n        return;\n      } // If the downstream application returns falsy, return.\n      // They will then be responsible for handling the event.\n\n\n      if (this._bps && !this._bps(e.state)) {\n        return;\n      }\n\n      const {\n        url,\n        as,\n        options\n      } = e.state;\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (typeof url === 'undefined' || typeof as === 'undefined') {\n          console.warn('`popstate` event triggered but `event.state` did not have `url` or `as` https://err.sh/zeit/next.js/popstate-state-empty');\n        }\n      }\n\n      this.replace(url, as, options);\n    }; // represents the current component key\n\n\n    this.route = toRoute(pathname); // set up the component cache (by route keys)\n\n    this.components = {}; // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n\n    if (pathname !== '/_error') {\n      this.components[this.route] = {\n        Component,\n        props: initialProps,\n        err\n      };\n    }\n\n    this.components['/_app'] = {\n      Component: App\n    }; // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n    // @ts-ignore backwards compatibility\n\n    this.events = Router.events;\n    this.pageLoader = pageLoader;\n    this.pathname = pathname;\n    this.query = query;\n    this.asPath = as;\n    this.sub = subscription;\n    this.clc = null;\n    this._wrapApp = wrapApp;\n\n    if (typeof window !== 'undefined') {\n      // in order for `e.state` to work on the `onpopstate` event\n      // we have to register the initial route upon initialization\n      this.changeState('replaceState', utils_1.formatWithValidation({\n        pathname,\n        query\n      }), as);\n      window.addEventListener('popstate', this.onPopState);\n      window.addEventListener('unload', () => {\n        // Workaround for popstate firing on initial page load when\n        // navigating back from an external site\n        if (history.state) {\n          const {\n            url,\n            as,\n            options\n          } = history.state;\n          this.changeState('replaceState', url, as, (0, _assign.default)({}, options, {\n            fromExternal: true\n          }));\n        }\n      });\n    }\n  }\n\n  static _rewriteUrlForNextExport(url) {\n    return rewrite_url_for_export_1.rewriteUrlForNextExport(url);\n  }\n\n  update(route, Component) {\n    const data = this.components[route];\n\n    if (!data) {\n      throw new Error(\"Cannot update unavailable route: \".concat(route));\n    }\n\n    const newData = (0, _assign.default)({}, data, {\n      Component\n    });\n    this.components[route] = newData; // pages/_app.js updated\n\n    if (route === '/_app') {\n      this.notify(this.components[this.route]);\n      return;\n    }\n\n    if (route === this.route) {\n      this.notify(newData);\n    }\n  }\n\n  reload() {\n    window.location.reload();\n  }\n  /**\n   * Go back in history\n   */\n\n\n  back() {\n    window.history.back();\n  }\n  /**\n   * Performs a `pushState` with arguments\n   * @param url of the route\n   * @param as masks `url` for the browser\n   * @param options object you can define `shallow` and other options\n   */\n\n\n  push(url, as = url, options = {}) {\n    return this.change('pushState', url, as, options);\n  }\n  /**\n   * Performs a `replaceState` with arguments\n   * @param url of the route\n   * @param as masks `url` for the browser\n   * @param options object you can define `shallow` and other options\n   */\n\n\n  replace(url, as = url, options = {}) {\n    return this.change('replaceState', url, as, options);\n  }\n\n  change(method, _url, _as, options) {\n    return new _promise.default((resolve, reject) => {\n      // If url and as provided as an object representation,\n      // we'll format them into the string version here.\n      const url = typeof _url === 'object' ? utils_1.formatWithValidation(_url) : _url;\n      let as = typeof _as === 'object' ? utils_1.formatWithValidation(_as) : _as; // Add the ending slash to the paths. So, we can serve the\n      // \"<page>/index.html\" directly for the SSR page.\n\n      if (process.env.__NEXT_EXPORT_TRAILING_SLASH) {\n        // @ts-ignore this is temporarily global (attached to window)\n        if (__NEXT_DATA__.nextExport) {\n          as = rewrite_url_for_export_1.rewriteUrlForNextExport(as);\n        }\n      }\n\n      this.abortComponentLoad(as); // If the url change is only related to a hash change\n      // We should not proceed. We should only change the state.\n      // WARNING: `_h` is an internal option for handing Next.js client-side\n      // hydration. Your app should _never_ use this property. It may change at\n      // any time without notice.\n\n      if (!options._h && this.onlyAHashChange(as)) {\n        this.asPath = as;\n        Router.events.emit('hashChangeStart', as);\n        this.changeState(method, url, as);\n        this.scrollToHash(as);\n        Router.events.emit('hashChangeComplete', as);\n        return resolve(true);\n      }\n\n      const {\n        pathname,\n        query\n      } = url_1.parse(url, true); // If asked to change the current URL we should reload the current page\n      // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n      // We also need to set the method = replaceState always\n      // as this should not go into the history (That's how browsers work)\n      // We should compare the new asPath to the current asPath, not the url\n\n      if (!this.urlIsNew(as)) {\n        method = 'replaceState';\n      } // @ts-ignore pathname is always a string\n\n\n      const route = toRoute(pathname);\n      const {\n        shallow = false\n      } = options;\n\n      if (is_dynamic_1.isDynamicRoute(route)) {\n        const {\n          pathname: asPathname\n        } = url_1.parse(as);\n        const rr = route_regex_1.getRouteRegex(route);\n        const routeMatch = route_matcher_1.getRouteMatcher(rr)(asPathname);\n\n        if (!routeMatch) {\n          console.error(\"Your `<Link>`'s `as` value is incompatible with the `href` value. This is invalid.\");\n          return resolve(false);\n        } // Merge params into `query`, overwriting any specified in search\n\n\n        (0, _assign.default)(query, routeMatch);\n      }\n\n      Router.events.emit('routeChangeStart', as); // If shallow is true and the route exists in the router cache we reuse the previous result\n      // @ts-ignore pathname is always a string\n\n      this.getRouteInfo(route, pathname, query, as, shallow).then(routeInfo => {\n        const {\n          error\n        } = routeInfo;\n\n        if (error && error.cancelled) {\n          return resolve(false);\n        }\n\n        Router.events.emit('beforeHistoryChange', as);\n        this.changeState(method, url, as, options);\n        const hash = window.location.hash.substring(1);\n\n        if (process.env.NODE_ENV !== 'production') {\n          const appComp = this.components['/_app'].Component;\n          window.next.isPrerendered = appComp.getInitialProps === appComp.origGetInitialProps && !routeInfo.Component.getInitialProps;\n        } // @ts-ignore pathname is always defined\n\n\n        this.set(route, pathname, query, as, (0, _assign.default)({}, routeInfo, {\n          hash\n        }));\n\n        if (error) {\n          Router.events.emit('routeChangeError', error, as);\n          throw error;\n        }\n\n        Router.events.emit('routeChangeComplete', as);\n        return resolve(true);\n      }, reject);\n    });\n  }\n\n  changeState(method, url, as, options = {}) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof window.history === 'undefined') {\n        console.error(\"Warning: window.history is not available.\");\n        return;\n      } // @ts-ignore method should always exist on history\n\n\n      if (typeof window.history[method] === 'undefined') {\n        console.error(\"Warning: window.history.\".concat(method, \" is not available\"));\n        return;\n      }\n    }\n\n    if (method !== 'pushState' || utils_1.getURL() !== as) {\n      // @ts-ignore method should always exist on history\n      window.history[method]({\n        url,\n        as,\n        options\n      }, null, as);\n    }\n  }\n\n  getRouteInfo(route, pathname, query, as, shallow = false) {\n    const cachedRouteInfo = this.components[route]; // If there is a shallow route transition possible\n    // If the route is already rendered on the screen.\n\n    if (shallow && cachedRouteInfo && this.route === route) {\n      return _promise.default.resolve(cachedRouteInfo);\n    }\n\n    return new _promise.default((resolve, reject) => {\n      if (cachedRouteInfo) {\n        return resolve(cachedRouteInfo);\n      }\n\n      this.fetchComponent(route).then(Component => resolve({\n        Component\n      }), reject);\n    }).then(routeInfo => {\n      const {\n        Component\n      } = routeInfo;\n\n      if (process.env.NODE_ENV !== 'production') {\n        const {\n          isValidElementType\n        } = require('react-is');\n\n        if (!isValidElementType(Component)) {\n          throw new Error(\"The default export is not a React Component in page: \\\"\".concat(pathname, \"\\\"\"));\n        }\n      }\n\n      return new _promise.default((resolve, reject) => {\n        const ctx = {\n          pathname,\n          query,\n          asPath: as\n        };\n        this.getInitialProps(Component, ctx).then(props => {\n          // if data is inlined during prerender it is a string\n          if (props && typeof props.pageProps === 'string') {\n            props.pageProps = JSON.parse(props.pageProps);\n          }\n\n          routeInfo.props = props;\n          this.components[route] = routeInfo;\n          resolve(routeInfo);\n        }, reject);\n      });\n    }).catch(err => {\n      return new _promise.default(resolve => {\n        if (err.code === 'PAGE_LOAD_ERROR') {\n          // If we can't load the page it could be one of following reasons\n          //  1. Page doesn't exists\n          //  2. Page does exist in a different zone\n          //  3. Internal error while loading the page\n          // So, doing a hard reload is the proper way to deal with this.\n          window.location.href = as; // Changing the URL doesn't block executing the current code path.\n          // So, we need to mark it as a cancelled error and stop the routing logic.\n\n          err.cancelled = true; // @ts-ignore TODO: fix the control flow here\n\n          return resolve({\n            error: err\n          });\n        }\n\n        if (err.cancelled) {\n          // @ts-ignore TODO: fix the control flow here\n          return resolve({\n            error: err\n          });\n        }\n\n        resolve(this.fetchComponent('/_error').then(Component => {\n          const routeInfo = {\n            Component,\n            err\n          };\n          const ctx = {\n            err,\n            pathname,\n            query\n          };\n          return new _promise.default(resolve => {\n            this.getInitialProps(Component, ctx).then(props => {\n              routeInfo.props = props;\n              routeInfo.error = err;\n              resolve(routeInfo);\n            }, gipErr => {\n              console.error('Error in error page `getInitialProps`: ', gipErr);\n              routeInfo.error = err;\n              routeInfo.props = {};\n              resolve(routeInfo);\n            });\n          });\n        }));\n      });\n    });\n  }\n\n  set(route, pathname, query, as, data) {\n    this.route = route;\n    this.pathname = pathname;\n    this.query = query;\n    this.asPath = as;\n    this.notify(data);\n  }\n  /**\n   * Callback to execute before replacing router state\n   * @param cb callback to be executed\n   */\n\n\n  beforePopState(cb) {\n    this._bps = cb;\n  }\n\n  onlyAHashChange(as) {\n    if (!this.asPath) return false;\n    const [oldUrlNoHash, oldHash] = this.asPath.split('#');\n    const [newUrlNoHash, newHash] = as.split('#'); // Makes sure we scroll to the provided hash if the url/hash are the same\n\n    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n      return true;\n    } // If the urls are change, there's more than a hash change\n\n\n    if (oldUrlNoHash !== newUrlNoHash) {\n      return false;\n    } // If the hash has changed, then it's a hash only change.\n    // This check is necessary to handle both the enter and\n    // leave hash === '' cases. The identity case falls through\n    // and is treated as a next reload.\n\n\n    return oldHash !== newHash;\n  }\n\n  scrollToHash(as) {\n    const [, hash] = as.split('#'); // Scroll to top if the hash is just `#` with no value\n\n    if (hash === '') {\n      window.scrollTo(0, 0);\n      return;\n    } // First we check if the element by id is found\n\n\n    const idEl = document.getElementById(hash);\n\n    if (idEl) {\n      idEl.scrollIntoView();\n      return;\n    } // If there's no element with the id, we check the `name` property\n    // To mirror browsers\n\n\n    const nameEl = document.getElementsByName(hash)[0];\n\n    if (nameEl) {\n      nameEl.scrollIntoView();\n    }\n  }\n\n  urlIsNew(asPath) {\n    return this.asPath !== asPath;\n  }\n  /**\n   * Prefetch `page` code, you may wait for the data during `page` rendering.\n   * This feature only works in production!\n   * @param url of prefetched `page`\n   */\n\n\n  prefetch(url) {\n    return new _promise.default((resolve, reject) => {\n      // Prefetch is not supported in development mode because it would trigger on-demand-entries\n      if (process.env.NODE_ENV !== 'production') return;\n      const {\n        pathname\n      } = url_1.parse(url); // @ts-ignore pathname is always defined\n\n      const route = toRoute(pathname);\n      this.pageLoader.prefetch(route).then(resolve, reject);\n    });\n  }\n\n  async fetchComponent(route) {\n    let cancelled = false;\n\n    const cancel = this.clc = () => {\n      cancelled = true;\n    };\n\n    const Component = await this.pageLoader.loadPage(route);\n\n    if (cancelled) {\n      const error = new Error(\"Abort fetching component for route: \\\"\".concat(route, \"\\\"\"));\n      error.cancelled = true;\n      throw error;\n    }\n\n    if (cancel === this.clc) {\n      this.clc = null;\n    }\n\n    return Component;\n  }\n\n  async getInitialProps(Component, ctx) {\n    let cancelled = false;\n\n    const cancel = () => {\n      cancelled = true;\n    };\n\n    this.clc = cancel;\n    const {\n      Component: App\n    } = this.components['/_app'];\n    const props = await utils_1.loadGetInitialProps(App, {\n      AppTree: this._wrapApp(App),\n      Component,\n      router: this,\n      ctx\n    });\n\n    if (cancel === this.clc) {\n      this.clc = null;\n    }\n\n    if (cancelled) {\n      const err = new Error('Loading initial props cancelled');\n      err.cancelled = true;\n      throw err;\n    }\n\n    return props;\n  }\n\n  abortComponentLoad(as) {\n    if (this.clc) {\n      const e = new Error('Route Cancelled');\n      e.cancelled = true;\n      Router.events.emit('routeChangeError', e, as);\n      this.clc();\n      this.clc = null;\n    }\n  }\n\n  notify(data) {\n    this.sub(data, this.components['/_app'].Component);\n  }\n\n}\n\nRouter.events = mitt_1.default();\nexports.default = Router;","map":{"version":3,"sources":["/Users/starshows/Desktop/domain_counter/web/domain-counter/node_modules/next-server/dist/lib/router/router.js"],"names":["__importDefault","mod","__esModule","exports","value","url_1","require","mitt_1","utils_1","rewrite_url_for_export_1","route_matcher_1","route_regex_1","is_dynamic_1","toRoute","path","replace","Router","constructor","pathname","query","as","initialProps","pageLoader","App","wrapApp","Component","err","subscription","onPopState","e","state","changeState","formatWithValidation","getURL","options","fromExternal","_bps","url","process","env","NODE_ENV","console","warn","route","components","props","events","asPath","sub","clc","_wrapApp","window","addEventListener","history","_rewriteUrlForNextExport","rewriteUrlForNextExport","update","data","Error","newData","notify","reload","location","back","push","change","method","_url","_as","resolve","reject","__NEXT_EXPORT_TRAILING_SLASH","__NEXT_DATA__","nextExport","abortComponentLoad","_h","onlyAHashChange","emit","scrollToHash","parse","urlIsNew","shallow","isDynamicRoute","asPathname","rr","getRouteRegex","routeMatch","getRouteMatcher","error","getRouteInfo","then","routeInfo","cancelled","hash","substring","appComp","next","isPrerendered","getInitialProps","origGetInitialProps","set","cachedRouteInfo","fetchComponent","isValidElementType","ctx","pageProps","JSON","catch","code","href","gipErr","beforePopState","cb","oldUrlNoHash","oldHash","split","newUrlNoHash","newHash","scrollTo","idEl","document","getElementById","scrollIntoView","nameEl","getElementsByName","prefetch","cancel","loadPage","loadGetInitialProps","AppTree","router","default"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst url_1 = require(\"url\");\nconst mitt_1 = __importDefault(require(\"../mitt\"));\nconst utils_1 = require(\"../utils\");\nconst rewrite_url_for_export_1 = require(\"./rewrite-url-for-export\");\nconst route_matcher_1 = require(\"./utils/route-matcher\");\nconst route_regex_1 = require(\"./utils/route-regex\");\nconst is_dynamic_1 = require(\"./utils/is-dynamic\");\nfunction toRoute(path) {\n    return path.replace(/\\/$/, '') || '/';\n}\nclass Router {\n    constructor(pathname, query, as, { initialProps, pageLoader, App, wrapApp, Component, err, subscription, }) {\n        this.onPopState = (e) => {\n            if (!e.state) {\n                // We get state as undefined for two reasons.\n                //  1. With older safari (< 8) and older chrome (< 34)\n                //  2. When the URL changed with #\n                //\n                // In the both cases, we don't need to proceed and change the route.\n                // (as it's already changed)\n                // But we can simply replace the state with the new changes.\n                // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n                // So, doing the following for (1) does no harm.\n                const { pathname, query } = this;\n                this.changeState('replaceState', utils_1.formatWithValidation({ pathname, query }), utils_1.getURL());\n                return;\n            }\n            // Make sure we don't re-render on initial load,\n            // can be caused by navigating back from an external site\n            if (e.state.options && e.state.options.fromExternal) {\n                return;\n            }\n            // If the downstream application returns falsy, return.\n            // They will then be responsible for handling the event.\n            if (this._bps && !this._bps(e.state)) {\n                return;\n            }\n            const { url, as, options } = e.state;\n            if (process.env.NODE_ENV !== 'production') {\n                if (typeof url === 'undefined' || typeof as === 'undefined') {\n                    console.warn('`popstate` event triggered but `event.state` did not have `url` or `as` https://err.sh/zeit/next.js/popstate-state-empty');\n                }\n            }\n            this.replace(url, as, options);\n        };\n        // represents the current component key\n        this.route = toRoute(pathname);\n        // set up the component cache (by route keys)\n        this.components = {};\n        // We should not keep the cache, if there's an error\n        // Otherwise, this cause issues when when going back and\n        // come again to the errored page.\n        if (pathname !== '/_error') {\n            this.components[this.route] = { Component, props: initialProps, err };\n        }\n        this.components['/_app'] = { Component: App };\n        // Backwards compat for Router.router.events\n        // TODO: Should be remove the following major version as it was never documented\n        // @ts-ignore backwards compatibility\n        this.events = Router.events;\n        this.pageLoader = pageLoader;\n        this.pathname = pathname;\n        this.query = query;\n        this.asPath = as;\n        this.sub = subscription;\n        this.clc = null;\n        this._wrapApp = wrapApp;\n        if (typeof window !== 'undefined') {\n            // in order for `e.state` to work on the `onpopstate` event\n            // we have to register the initial route upon initialization\n            this.changeState('replaceState', utils_1.formatWithValidation({ pathname, query }), as);\n            window.addEventListener('popstate', this.onPopState);\n            window.addEventListener('unload', () => {\n                // Workaround for popstate firing on initial page load when\n                // navigating back from an external site\n                if (history.state) {\n                    const { url, as, options } = history.state;\n                    this.changeState('replaceState', url, as, Object.assign({}, options, { fromExternal: true }));\n                }\n            });\n        }\n    }\n    static _rewriteUrlForNextExport(url) {\n        return rewrite_url_for_export_1.rewriteUrlForNextExport(url);\n    }\n    update(route, Component) {\n        const data = this.components[route];\n        if (!data) {\n            throw new Error(`Cannot update unavailable route: ${route}`);\n        }\n        const newData = Object.assign({}, data, { Component });\n        this.components[route] = newData;\n        // pages/_app.js updated\n        if (route === '/_app') {\n            this.notify(this.components[this.route]);\n            return;\n        }\n        if (route === this.route) {\n            this.notify(newData);\n        }\n    }\n    reload() {\n        window.location.reload();\n    }\n    /**\n     * Go back in history\n     */\n    back() {\n        window.history.back();\n    }\n    /**\n     * Performs a `pushState` with arguments\n     * @param url of the route\n     * @param as masks `url` for the browser\n     * @param options object you can define `shallow` and other options\n     */\n    push(url, as = url, options = {}) {\n        return this.change('pushState', url, as, options);\n    }\n    /**\n     * Performs a `replaceState` with arguments\n     * @param url of the route\n     * @param as masks `url` for the browser\n     * @param options object you can define `shallow` and other options\n     */\n    replace(url, as = url, options = {}) {\n        return this.change('replaceState', url, as, options);\n    }\n    change(method, _url, _as, options) {\n        return new Promise((resolve, reject) => {\n            // If url and as provided as an object representation,\n            // we'll format them into the string version here.\n            const url = typeof _url === 'object' ? utils_1.formatWithValidation(_url) : _url;\n            let as = typeof _as === 'object' ? utils_1.formatWithValidation(_as) : _as;\n            // Add the ending slash to the paths. So, we can serve the\n            // \"<page>/index.html\" directly for the SSR page.\n            if (process.env.__NEXT_EXPORT_TRAILING_SLASH) {\n                // @ts-ignore this is temporarily global (attached to window)\n                if (__NEXT_DATA__.nextExport) {\n                    as = rewrite_url_for_export_1.rewriteUrlForNextExport(as);\n                }\n            }\n            this.abortComponentLoad(as);\n            // If the url change is only related to a hash change\n            // We should not proceed. We should only change the state.\n            // WARNING: `_h` is an internal option for handing Next.js client-side\n            // hydration. Your app should _never_ use this property. It may change at\n            // any time without notice.\n            if (!options._h && this.onlyAHashChange(as)) {\n                this.asPath = as;\n                Router.events.emit('hashChangeStart', as);\n                this.changeState(method, url, as);\n                this.scrollToHash(as);\n                Router.events.emit('hashChangeComplete', as);\n                return resolve(true);\n            }\n            const { pathname, query } = url_1.parse(url, true);\n            // If asked to change the current URL we should reload the current page\n            // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n            // We also need to set the method = replaceState always\n            // as this should not go into the history (That's how browsers work)\n            // We should compare the new asPath to the current asPath, not the url\n            if (!this.urlIsNew(as)) {\n                method = 'replaceState';\n            }\n            // @ts-ignore pathname is always a string\n            const route = toRoute(pathname);\n            const { shallow = false } = options;\n            if (is_dynamic_1.isDynamicRoute(route)) {\n                const { pathname: asPathname } = url_1.parse(as);\n                const rr = route_regex_1.getRouteRegex(route);\n                const routeMatch = route_matcher_1.getRouteMatcher(rr)(asPathname);\n                if (!routeMatch) {\n                    console.error(\"Your `<Link>`'s `as` value is incompatible with the `href` value. This is invalid.\");\n                    return resolve(false);\n                }\n                // Merge params into `query`, overwriting any specified in search\n                Object.assign(query, routeMatch);\n            }\n            Router.events.emit('routeChangeStart', as);\n            // If shallow is true and the route exists in the router cache we reuse the previous result\n            // @ts-ignore pathname is always a string\n            this.getRouteInfo(route, pathname, query, as, shallow).then(routeInfo => {\n                const { error } = routeInfo;\n                if (error && error.cancelled) {\n                    return resolve(false);\n                }\n                Router.events.emit('beforeHistoryChange', as);\n                this.changeState(method, url, as, options);\n                const hash = window.location.hash.substring(1);\n                if (process.env.NODE_ENV !== 'production') {\n                    const appComp = this.components['/_app'].Component;\n                    window.next.isPrerendered =\n                        appComp.getInitialProps === appComp.origGetInitialProps &&\n                            !routeInfo.Component.getInitialProps;\n                }\n                // @ts-ignore pathname is always defined\n                this.set(route, pathname, query, as, Object.assign({}, routeInfo, { hash }));\n                if (error) {\n                    Router.events.emit('routeChangeError', error, as);\n                    throw error;\n                }\n                Router.events.emit('routeChangeComplete', as);\n                return resolve(true);\n            }, reject);\n        });\n    }\n    changeState(method, url, as, options = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (typeof window.history === 'undefined') {\n                console.error(`Warning: window.history is not available.`);\n                return;\n            }\n            // @ts-ignore method should always exist on history\n            if (typeof window.history[method] === 'undefined') {\n                console.error(`Warning: window.history.${method} is not available`);\n                return;\n            }\n        }\n        if (method !== 'pushState' || utils_1.getURL() !== as) {\n            // @ts-ignore method should always exist on history\n            window.history[method]({ url, as, options }, null, as);\n        }\n    }\n    getRouteInfo(route, pathname, query, as, shallow = false) {\n        const cachedRouteInfo = this.components[route];\n        // If there is a shallow route transition possible\n        // If the route is already rendered on the screen.\n        if (shallow && cachedRouteInfo && this.route === route) {\n            return Promise.resolve(cachedRouteInfo);\n        }\n        return new Promise((resolve, reject) => {\n            if (cachedRouteInfo) {\n                return resolve(cachedRouteInfo);\n            }\n            this.fetchComponent(route).then(Component => resolve({ Component }), reject);\n        })\n            .then((routeInfo) => {\n            const { Component } = routeInfo;\n            if (process.env.NODE_ENV !== 'production') {\n                const { isValidElementType } = require('react-is');\n                if (!isValidElementType(Component)) {\n                    throw new Error(`The default export is not a React Component in page: \"${pathname}\"`);\n                }\n            }\n            return new Promise((resolve, reject) => {\n                const ctx = { pathname, query, asPath: as };\n                this.getInitialProps(Component, ctx).then(props => {\n                    // if data is inlined during prerender it is a string\n                    if (props && typeof props.pageProps === 'string') {\n                        props.pageProps = JSON.parse(props.pageProps);\n                    }\n                    routeInfo.props = props;\n                    this.components[route] = routeInfo;\n                    resolve(routeInfo);\n                }, reject);\n            });\n        })\n            .catch(err => {\n            return new Promise(resolve => {\n                if (err.code === 'PAGE_LOAD_ERROR') {\n                    // If we can't load the page it could be one of following reasons\n                    //  1. Page doesn't exists\n                    //  2. Page does exist in a different zone\n                    //  3. Internal error while loading the page\n                    // So, doing a hard reload is the proper way to deal with this.\n                    window.location.href = as;\n                    // Changing the URL doesn't block executing the current code path.\n                    // So, we need to mark it as a cancelled error and stop the routing logic.\n                    err.cancelled = true;\n                    // @ts-ignore TODO: fix the control flow here\n                    return resolve({ error: err });\n                }\n                if (err.cancelled) {\n                    // @ts-ignore TODO: fix the control flow here\n                    return resolve({ error: err });\n                }\n                resolve(this.fetchComponent('/_error').then(Component => {\n                    const routeInfo = { Component, err };\n                    const ctx = { err, pathname, query };\n                    return new Promise(resolve => {\n                        this.getInitialProps(Component, ctx).then(props => {\n                            routeInfo.props = props;\n                            routeInfo.error = err;\n                            resolve(routeInfo);\n                        }, gipErr => {\n                            console.error('Error in error page `getInitialProps`: ', gipErr);\n                            routeInfo.error = err;\n                            routeInfo.props = {};\n                            resolve(routeInfo);\n                        });\n                    });\n                }));\n            });\n        });\n    }\n    set(route, pathname, query, as, data) {\n        this.route = route;\n        this.pathname = pathname;\n        this.query = query;\n        this.asPath = as;\n        this.notify(data);\n    }\n    /**\n     * Callback to execute before replacing router state\n     * @param cb callback to be executed\n     */\n    beforePopState(cb) {\n        this._bps = cb;\n    }\n    onlyAHashChange(as) {\n        if (!this.asPath)\n            return false;\n        const [oldUrlNoHash, oldHash] = this.asPath.split('#');\n        const [newUrlNoHash, newHash] = as.split('#');\n        // Makes sure we scroll to the provided hash if the url/hash are the same\n        if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n            return true;\n        }\n        // If the urls are change, there's more than a hash change\n        if (oldUrlNoHash !== newUrlNoHash) {\n            return false;\n        }\n        // If the hash has changed, then it's a hash only change.\n        // This check is necessary to handle both the enter and\n        // leave hash === '' cases. The identity case falls through\n        // and is treated as a next reload.\n        return oldHash !== newHash;\n    }\n    scrollToHash(as) {\n        const [, hash] = as.split('#');\n        // Scroll to top if the hash is just `#` with no value\n        if (hash === '') {\n            window.scrollTo(0, 0);\n            return;\n        }\n        // First we check if the element by id is found\n        const idEl = document.getElementById(hash);\n        if (idEl) {\n            idEl.scrollIntoView();\n            return;\n        }\n        // If there's no element with the id, we check the `name` property\n        // To mirror browsers\n        const nameEl = document.getElementsByName(hash)[0];\n        if (nameEl) {\n            nameEl.scrollIntoView();\n        }\n    }\n    urlIsNew(asPath) {\n        return this.asPath !== asPath;\n    }\n    /**\n     * Prefetch `page` code, you may wait for the data during `page` rendering.\n     * This feature only works in production!\n     * @param url of prefetched `page`\n     */\n    prefetch(url) {\n        return new Promise((resolve, reject) => {\n            // Prefetch is not supported in development mode because it would trigger on-demand-entries\n            if (process.env.NODE_ENV !== 'production')\n                return;\n            const { pathname } = url_1.parse(url);\n            // @ts-ignore pathname is always defined\n            const route = toRoute(pathname);\n            this.pageLoader.prefetch(route).then(resolve, reject);\n        });\n    }\n    async fetchComponent(route) {\n        let cancelled = false;\n        const cancel = (this.clc = () => {\n            cancelled = true;\n        });\n        const Component = await this.pageLoader.loadPage(route);\n        if (cancelled) {\n            const error = new Error(`Abort fetching component for route: \"${route}\"`);\n            error.cancelled = true;\n            throw error;\n        }\n        if (cancel === this.clc) {\n            this.clc = null;\n        }\n        return Component;\n    }\n    async getInitialProps(Component, ctx) {\n        let cancelled = false;\n        const cancel = () => {\n            cancelled = true;\n        };\n        this.clc = cancel;\n        const { Component: App } = this.components['/_app'];\n        const props = await utils_1.loadGetInitialProps(App, {\n            AppTree: this._wrapApp(App),\n            Component,\n            router: this,\n            ctx,\n        });\n        if (cancel === this.clc) {\n            this.clc = null;\n        }\n        if (cancelled) {\n            const err = new Error('Loading initial props cancelled');\n            err.cancelled = true;\n            throw err;\n        }\n        return props;\n    }\n    abortComponentLoad(as) {\n        if (this.clc) {\n            const e = new Error('Route Cancelled');\n            e.cancelled = true;\n            Router.events.emit('routeChangeError', e, as);\n            this.clc();\n            this.clc = null;\n        }\n    }\n    notify(data) {\n        this.sub(data, this.components['/_app'].Component);\n    }\n}\nRouter.events = mitt_1.default();\nexports.default = Router;\n"]},"metadata":{},"sourceType":"script"}